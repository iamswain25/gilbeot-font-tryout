{"version":3,"sources":["components/FabricBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_editor","newText","fabric","IText","left","Math","random","top","fontSize","styles","fontFamily","defaultText","applyFont","active","canvas","getActiveObject","setSelectionStyles","console","log","toJSON","requestRenderAll","download","dataURL","toDataURL","format","downloadLink","window","document","createElement","setAttribute","click","iTextAddHandler","add","FabricBox","React","useState","width","height","setSize","useFabricJSEditor","editor","onReady","addDefaultReady","useCallback","c","setDimensions","fonts","ready","then","res","addEventListener","ev","code","isEditing","remove","useEffect","type","value","onChange","Number","target","onClick","App","className","href","defaultValue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.370d86aa.chunk.js","sourcesContent":["import { fabric } from \"fabric\";\nimport {\n  FabricJSCanvas,\n  FabricJSEditor,\n  useFabricJSEditor,\n} from \"fabricjs-react\";\nimport React from \"react\";\n\nconst newText = () =>\n  new fabric.IText(\"길벗체\", {\n    left: Math.random() * 100,\n    top: Math.random() * 100,\n    fontSize: 250,\n    styles: [\n      [\n        { fontFamily: \"Gilbeot_Rainbow\" },\n        { fontFamily: \"Gilbeot_TG\" },\n        { fontFamily: \"Gilbeot_BI\" },\n      ],\n    ],\n  });\nconst defaultText = newText();\nlet _editor: FabricJSEditor | undefined;\nconst applyFont = (fontFamily: string) => () => {\n  if (!_editor) return;\n  const active = _editor.canvas.getActiveObject() as fabric.IText;\n  if (!active) return;\n  // console.log(active);\n  active.setSelectionStyles({\n    fontFamily,\n  });\n  console.log(active.toJSON().styles);\n  _editor.canvas.requestRenderAll();\n};\n\nconst download = () => {\n  if (!_editor) return;\n  const dataURL = _editor.canvas.toDataURL({\n    format: \"png\",\n  });\n  const downloadLink = window.document.createElement(\"a\");\n  downloadLink.setAttribute(\"download\", \"gilbeot.png\");\n  downloadLink.setAttribute(\"href\", dataURL);\n  downloadLink.click();\n  _editor.canvas.requestRenderAll();\n};\nconst iTextAddHandler = () => {\n  if (!_editor) return;\n  _editor.canvas.add(newText());\n};\nexport default function FabricBox() {\n  const [[width, height], setSize] = React.useState([800, 400]);\n  const { editor, onReady } = useFabricJSEditor();\n  _editor = editor;\n\n  const addDefaultReady = React.useCallback((c: fabric.Canvas) => {\n    onReady(c);\n    c.setDimensions({ width, height });\n    window.document.fonts.ready.then((res) => c.add(defaultText));\n    window.addEventListener(\"keydown\", (ev) => {\n      console.log(ev.code);\n      if (ev.code === \"Delete\") {\n        const active = c.getActiveObject() as fabric.IText;\n        if (!active || active?.isEditing) return;\n        c.remove(active);\n        c.requestRenderAll();\n      }\n    });\n    c.requestRenderAll();\n    // eslint-disable-next-line\n  }, []);\n\n  React.useEffect(() => {\n    editor?.canvas.setDimensions({ width, height });\n    // eslint-disable-next-line\n  }, [width, height]);\n  //   console.log(editor);\n  //   if (!editor) return null;\n\n  return (\n    <section>\n      <div>\n        width:\n        <input\n          type=\"number\"\n          value={width}\n          onChange={(ev) => setSize([Number(ev.target.value), height])}\n        />\n      </div>\n      <div>\n        height:\n        <input\n          type=\"number\"\n          value={height}\n          onChange={(ev) => setSize([width, Number(ev.target.value)])}\n        />\n      </div>\n      <div>\n        <button onClick={iTextAddHandler}>Add New</button>\n        <button onClick={download}>Download PNG</button>\n      </div>\n      <FabricJSCanvas onReady={addDefaultReady} />\n      <div>\n        <button onClick={applyFont(\"Gilbeot_BI\")}>apply BI</button>\n        <button onClick={applyFont(\"Gilbeot_Rainbow\")}>apply Rainbow</button>\n        <button onClick={applyFont(\"Gilbeot_TG\")}>apply TG</button>\n      </div>\n    </section>\n  );\n}\n","import \"normalize.css\";\nimport \"./App.css\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport FabricBox from \"./components/FabricBox\";\nfunction App() {\n  return (\n    <section className=\"container\">\n      <h1>\n        <span className=\"Gilbeot_Rainbow\">길벗체 웹 테스트</span>\n        <a href=\"http://rainbowfoundation.co.kr/\" className=\"Gilbeot_TG link\">\n          홈페이지 가기\n        </a>\n      </h1>\n      <div>\n        <h2>\n          <TextareaAutosize\n            className=\"Gilbeot_BI underline\"\n            defaultValue=\"Gilbeot_BI\"\n          />\n        </h2>\n        <h2>\n          <TextareaAutosize\n            className=\"Gilbeot_Rainbow underline\"\n            defaultValue=\"Gilbeot_Rainbow\"\n          />\n        </h2>\n        <h2>\n          <TextareaAutosize\n            className=\"Gilbeot_TG underline\"\n            defaultValue=\"Gilbeot_TG\"\n          />\n        </h2>\n      </div>\n      <FabricBox />\n    </section>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}